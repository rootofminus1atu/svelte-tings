<script lang="ts">
    import type { ObjectScheme, SchemeType } from "./interfaces";
    import SchemeView from "./SchemeView.svelte";
    import Dropdown from "./Dropdown.svelte"

    let { scheme = $bindable() }: { scheme: ObjectScheme } = $props()

    function addField() {
        scheme = {
            ...scheme,
            fields: [...scheme.fields, { key: "", value: undefined }]
        }
    }

    // TODO: change the value to a property type and make that be the `type` used for the value
    function onSelect(value: string, index: number) {
        scheme = {
            ...scheme,
            fields: scheme.fields.map((field, i) => 
                i === index 
                    ? { ...field, value: { type: "STRING", path: value, mode: 'INNER_HTML' } } 
                    : field
            )
        }
    }
</script>

{"{"}
    <div class="pl-1">
        {#each scheme.fields as kv, index}
            "{kv.key}": 
            {#if kv.value}
                <SchemeView scheme={kv.value} />
            {:else}
                <Dropdown onSelect={(value) => onSelect(value, index)} />
                <br>
            {/if}
        {/each}
    </div>
    <div class="pl-1">
        <button onclick="{addField}">add field</button>
    </div>
{"}"}<br>

<style>
    .pl-1 {
        padding-left: 1rem;
    }
</style>